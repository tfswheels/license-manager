// admin/src/pages/TemplateEditor.jsx
import { useState, useEffect, useRef } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { Save, X, Eye, Code, AlertTriangle, CheckCircle } from 'lucide-react';
import api from '../utils/api';
import { getCurrentShopId } from '../utils/shopUtils';

const SAMPLE_DATA = {
  first_name: 'John',
  last_name: 'Doe',
  order_number: '1001',
  product_name: 'Premium Software License',
  license_keys: `<div class="license-key">1. ABC123-DEF456-GHI789</div>
<div class="license-key">2. JKL012-MNO345-PQR678</div>`,
  license_keys_text: '1. ABC123-DEF456-GHI789\n2. JKL012-MNO345-PQR678'
};

const VARIABLES = [
  { name: '{{first_name}}', description: 'Customer first name' },
  { name: '{{last_name}}', description: 'Customer last name' },
  { name: '{{order_number}}', description: 'Order number' },
  { name: '{{product_name}}', description: 'Product name' },
  { name: '{{license_keys}}', description: 'License keys (HTML)' }
];

export default function TemplateEditor() {
  const navigate = useNavigate();
  const { id } = useParams();
  const isEditMode = !!id;

  const [loading, setLoading] = useState(isEditMode);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('html'); // 'html' or 'text'
  const htmlTextareaRef = useRef(null);
  const textTextareaRef = useRef(null);
  const [validation, setValidation] = useState(null);

  const [templateName, setTemplateName] = useState('');
  const [subject, setSubject] = useState('');
  const [htmlTemplate, setHtmlTemplate] = useState('');
  const [textTemplate, setTextTemplate] = useState('');
  const [textAutoGenerated, setTextAutoGenerated] = useState(true);

  // Auto-generate plain text from HTML when HTML changes
  useEffect(() => {
    if (textAutoGenerated && htmlTemplate) {
      const plainText = htmlToPlainText(htmlTemplate);
      setTextTemplate(plainText);
    }
  }, [htmlTemplate, textAutoGenerated]);

  useEffect(() => {
    if (isEditMode) {
      loadTemplate();
    } else {
      // Set default template for new templates
      setHtmlTemplate(getDefaultHTML());
      setTextTemplate(getDefaultText());
      setSubject('Your License Keys - Order #{{order_number}}');
    }
  }, [id]);

  const loadTemplate = async () => {
    try {
      const response = await api.get(`/api/admin/templates/${id}`);
      const template = response.data;
      
      setTemplateName(template.template_name);
      setSubject(template.email_subject);
      setHtmlTemplate(template.email_html_template);
      setTextTemplate(template.email_text_template);
    } catch (error) {
      console.error('Error loading template:', error);
      alert('Failed to load template');
    } finally {
      setLoading(false);
    }
  };

  const validateAndSave = async () => {
    // Validate
    try {
      const response = await api.post('/api/admin/templates/validate', {
        emailHtmlTemplate: htmlTemplate
      });
      setValidation(response.data);

      if (!response.data.valid) {
        return;
      }

      await saveTemplate();
    } catch (error) {
      console.error('Error validating:', error);
      alert('Failed to validate template');
    }
  };

  const saveTemplate = async () => {
    if (!templateName.trim()) {
      alert('Please enter a template name');
      return;
    }

    if (!subject.trim()) {
      alert('Please enter an email subject');
      return;
    }

    try {
      setSaving(true);
      const shopId = await getCurrentShopId();
      if (!shopId) {
        alert('Could not determine current shop. Please reload the page.');
        return;
      }

      const payload = {
        shopId: parseInt(shopId),
        templateName: templateName.trim(),
        emailSubject: subject.trim(),
        emailHtmlTemplate: htmlTemplate,
        emailTextTemplate: textTemplate
      };

      if (isEditMode) {
        await api.put(`/api/admin/templates/${id}`, payload);
      } else {
        await api.post('/api/admin/templates', payload);
      }

      navigate('/templates');
    } catch (error) {
      console.error('Error saving template:', error);
      alert(error.response?.data?.error || 'Failed to save template');
    } finally {
      setSaving(false);
    }
  };

  const renderPreview = () => {
    let rendered = htmlTemplate;
    
    // Replace variables with sample data
    for (const [key, value] of Object.entries(SAMPLE_DATA)) {
      const regex = new RegExp(`\\{\\{${key}\\}\\}`, 'g');
      rendered = rendered.replace(regex, value);
    }

    return rendered;
  };

  const insertVariable = (variable) => {
    if (activeTab === 'html') {
      const textarea = htmlTextareaRef.current;
      if (textarea) {
        const scrollTop = textarea.scrollTop; // Save scroll position
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const text = htmlTemplate;
        const newText = text.substring(0, start) + variable + text.substring(end);
        setHtmlTemplate(newText);
        
        // Set cursor position after inserted variable WITHOUT scrolling
        setTimeout(() => {
          textarea.scrollTop = scrollTop; // Restore scroll position
          textarea.setSelectionRange(start + variable.length, start + variable.length);
        }, 0);
      }
    } else {
      const textarea = textTextareaRef.current;
      if (textarea) {
        const scrollTop = textarea.scrollTop; // Save scroll position
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const text = textTemplate;
        const newText = text.substring(0, start) + variable + text.substring(end);
        setTextTemplate(newText);
        setTextAutoGenerated(false); // User manually edited
        
        // Set cursor position after inserted variable WITHOUT scrolling
        setTimeout(() => {
          textarea.scrollTop = scrollTop; // Restore scroll position
          textarea.setSelectionRange(start + variable.length, start + variable.length);
        }, 0);
      }
    }
  };

  const htmlToPlainText = (html) => {
    // Simple HTML to plain text conversion
    return html
      .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '') // Remove style tags
      .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '') // Remove script tags
      .replace(/<head[^>]*>[\s\S]*?<\/head>/gi, '') // Remove head
      .replace(/<!DOCTYPE[^>]*>/gi, '') // Remove doctype
      .replace(/<br\s*\/?>/gi, '\n') // BR to newline
      .replace(/<\/p>/gi, '\n\n') // P to double newline
      .replace(/<\/div>/gi, '\n') // DIV to newline
      .replace(/<\/h[1-6]>/gi, '\n\n') // Headers to double newline
      .replace(/<[^>]+>/g, '') // Remove all other tags
      .replace(/&nbsp;/g, ' ') // Replace &nbsp;
      .replace(/&amp;/g, '&') // Replace &amp;
      .replace(/&lt;/g, '<') // Replace &lt;
      .replace(/&gt;/g, '>') // Replace &gt;
      .replace(/&quot;/g, '"') // Replace &quot;
      .replace(/\n\s*\n\s*\n/g, '\n\n') // Remove excess newlines
      .trim();
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              {isEditMode ? 'Edit Template' : 'Create Template'}
            </h1>
            <p className="mt-2 text-gray-600">
              Design your email template with live preview
            </p>
          </div>
          <div className="flex gap-3">
            <button
              onClick={() => navigate('/templates')}
              className="flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
            >
              <X className="w-5 h-5" />
              Cancel
            </button>
            <button
              onClick={validateAndSave}
              disabled={saving}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              <Save className="w-5 h-5" />
              {saving ? 'Saving...' : 'Save Template'}
            </button>
          </div>
        </div>
      </div>

      {/* Validation Messages */}
      {validation && (
        <div className="mb-6">
          {validation.errors.length > 0 && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg mb-3">
              <div className="flex items-start gap-2">
                <AlertTriangle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
                <div>
                  <h4 className="font-semibold text-red-800 mb-1">Errors</h4>
                  <ul className="list-disc list-inside text-sm text-red-700">
                    {validation.errors.map((error, i) => (
                      <li key={i}>{error}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          )}
          
          {validation.warnings.length > 0 && (
            <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-start gap-2">
                <AlertTriangle className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                <div>
                  <h4 className="font-semibold text-yellow-800 mb-1">Warnings</h4>
                  <ul className="list-disc list-inside text-sm text-yellow-700">
                    {validation.warnings.map((warning, i) => (
                      <li key={i}>{warning}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          )}
          
          {validation.valid && validation.warnings.length === 0 && (
            <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center gap-2">
                <CheckCircle className="w-5 h-5 text-green-600" />
                <span className="text-green-800 font-medium">Template is valid!</span>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Template Name */}
      <div className="mb-6 bg-white border border-gray-200 rounded-lg p-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Template Name
        </label>
        <input
          type="text"
          value={templateName}
          onChange={(e) => setTemplateName(e.target.value)}
          placeholder="e.g., Software License Template"
          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      {/* Subject Line */}
      <div className="mb-6 bg-white border border-gray-200 rounded-lg p-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Email Subject
        </label>
        <input
          type="text"
          value={subject}
          onChange={(e) => setSubject(e.target.value)}
          placeholder="Your License Keys - Order #{{order_number}}"
          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <p className="mt-2 text-sm text-gray-500">
          Preview: {subject.replace(/\{\{(\w+)\}\}/g, (_, key) => SAMPLE_DATA[key] || `{{${key}}}`)}
        </p>
      </div>

      {/* Email Template Editor */}
      <div className="mb-6 bg-white border border-gray-200 rounded-lg overflow-hidden">
        {/* Variable Palette at Top */}
        <div className="border-b border-gray-200 px-6 py-4 bg-gray-50">
          <h4 className="text-sm font-medium text-gray-700 mb-3">Click to Insert Variables:</h4>
          <div className="flex flex-wrap gap-2">
            {VARIABLES.map((variable) => (
              <button
                key={variable.name}
                onClick={() => insertVariable(variable.name)}
                className="px-3 py-1.5 text-sm bg-white border border-gray-300 text-gray-700 rounded hover:bg-gray-50 hover:border-gray-400"
                title={variable.description}
              >
                {variable.name}
              </button>
            ))}
          </div>
        </div>

        {/* Code / Plain Text Toggle */}
        <div className="flex items-center border-b border-gray-200 px-6 py-3 bg-gray-50">
          <div className="flex gap-2">
            <button
              onClick={() => setActiveTab('html')}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium ${
                activeTab === 'html' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <Code className="w-4 h-4" />
              HTML Version
            </button>
            <button
              onClick={() => setActiveTab('text')}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium ${
                activeTab === 'text' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              Plain Text Version
            </button>
          </div>
        </div>

        {/* Split View: Editor + Preview */}
        <div className="grid grid-cols-2 divide-x divide-gray-200">
          {/* Left: Editor */}
          <div className="p-6">
            <h4 className="text-sm font-medium text-gray-700 mb-3">
              {activeTab === 'html' ? 'HTML Code' : 'Plain Text'}
            </h4>
            {activeTab === 'html' ? (
              <textarea
                ref={htmlTextareaRef}
                value={htmlTemplate}
                onChange={(e) => setHtmlTemplate(e.target.value)}
                className="w-full h-[600px] font-mono text-sm p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                placeholder="Enter HTML template..."
              />
            ) : (
              <>
                {textAutoGenerated && (
                  <div className="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg flex items-start gap-2">
                    <AlertTriangle className="w-4 h-4 text-blue-600 flex-shrink-0 mt-0.5" />
                    <div className="text-sm text-blue-800">
                      <strong>Auto-generated from HTML.</strong> Edit to customize, or it will auto-update when HTML changes.
                    </div>
                  </div>
                )}
                <textarea
                  ref={textTextareaRef}
                  value={textTemplate}
                  onChange={(e) => {
                    setTextTemplate(e.target.value);
                    setTextAutoGenerated(false);
                  }}
                  className="w-full h-[600px] font-mono text-sm p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                  placeholder="Plain text version (auto-generated from HTML)..."
                />
                {!textAutoGenerated && (
                  <button
                    onClick={() => setTextAutoGenerated(true)}
                    className="mt-3 text-sm text-blue-600 hover:text-blue-700 underline"
                  >
                    Reset to auto-generate from HTML
                  </button>
                )}
              </>
            )}
          </div>

          {/* Right: Live Preview */}
          <div className="p-6 bg-gray-50">
            <div className="flex items-center gap-2 mb-3">
              <Eye className="w-4 h-4 text-gray-600" />
              <h4 className="text-sm font-medium text-gray-700">Live Preview:</h4>
            </div>
            {activeTab === 'html' ? (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <iframe
                  srcDoc={renderPreview()}
                  className="w-full h-[600px]"
                  title="Email Preview"
                  sandbox="allow-same-origin"
                />
              </div>
            ) : (
              <pre className="bg-white p-4 rounded-lg border border-gray-200 h-[600px] overflow-auto text-sm whitespace-pre-wrap">
                {textTemplate.replace(/\{\{(\w+)\}\}/g, (_, key) => SAMPLE_DATA[key + '_text'] || SAMPLE_DATA[key] || `{{${key}}}`)}
              </pre>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function getDefaultHTML() {
  return `<!DOCTYPE html>
<html>
<head>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      line-height: 1.6; 
      color: #333; 
      max-width: 600px; 
      margin: 0 auto; 
    }
    .container { padding: 30px 20px; }
    .header { 
      text-align: center; 
      padding-bottom: 20px; 
      border-bottom: 2px solid #4CAF50; 
      margin-bottom: 30px; 
    }
    .license-box { 
      background: #f5f5f5; 
      padding: 20px; 
      margin: 25px 0; 
      border-radius: 8px; 
      border-left: 4px solid #4CAF50; 
    }
    .license-key { 
      font-family: 'Courier New', monospace; 
      font-size: 15px; 
      margin: 8px 0; 
      padding: 10px;
      background: white;
      border-radius: 4px;
      word-break: break-all;
    }
    .footer { 
      margin-top: 40px; 
      padding-top: 20px; 
      border-top: 1px solid #ddd; 
      text-align: center; 
      font-size: 12px; 
      color: #666; 
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h2>Thank You for Your Purchase!</h2>
    </div>
    
    <p>Hi {{first_name}},</p>
    
    <p>Your order <strong>#{{order_number}}</strong> has been confirmed.</p>
    
    <p><strong>Product:</strong> {{product_name}}</p>
    
    <div class="license-box">
      <strong>Your License Keys:</strong>
      {{license_keys}}
    </div>
    
    <p>Please save these license keys in a secure location. You'll need them to activate your product.</p>
    
    <p>If you have any questions or need assistance, please don't hesitate to contact us.</p>
    
    <p>Best regards,<br>The Team</p>
    
    <div class="footer">
      <p>This email was sent because you placed an order with us.</p>
    </div>
  </div>
</body>
</html>`;
}

function getDefaultText() {
  return `Hi {{first_name}},

Thank you for your purchase! Your order #{{order_number}} has been confirmed.

Product: {{product_name}}

Your License Keys:
{{license_keys}}

Please save these license keys in a secure location. You'll need them to activate your product.

If you have any questions or need assistance, please don't hesitate to contact us.

Best regards,
The Team`;
}